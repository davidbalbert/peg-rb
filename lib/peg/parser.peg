Parser {
  Grammar         <- identifier SuperGrammar? "{" Definition+ "}" endOfFile
  SuperGrammar    <- "<:" identifier
  Definition      <- identifier "<-" InlineRules
  InlineRules     <- NamedSequence ( "/" NamedSequence )*
  Expression      <- Sequence ( "/" Sequence )*
  NamedSequence   <- Sequence "--" identifier -- inline
                   / Sequence
  Sequence        <- Prefix*
  Prefix          <- "&" Suffix -- and
                   / "!" Suffix -- not
                   / Suffix
  Suffix          <- Primary "?"  -- maybe
                   / Primary "*"  -- star
                   / Primary "+"  -- plus
                   / Primary
  Primary         <- identifier !"<-"   -- identifier
                   / "(" Expression ")" -- group
                   / literal
                   / charClass
                   / "."                -- any

  identifier      <- identStart identCont*
  identStart      <- [a-zA-Z_]
  identCont       <- identStart / [0-9]
  literal         <- ['] ( !['] char  )* [']
                   / ["] ( !["] char  )* ["]
  charClass       <- '[' ( !']' range )* ']'
  range           <- char '-' char -- multiple
                   / char

  char            <- '\\\\'                -- backslash
                   / '\\\"'                -- doubleQuote
                   / '\\\''                -- singleQuote
                   / '\\['                 -- openSquare
                   / '\\]'                 -- closeSquare
                   / '\\b'                 -- backspace
                   / '\\n'                 -- newline
                   / '\\r'                 -- carriageReturn
                   / '\\t'                 -- tab
                   / '\\u' hex hex hex hex -- unicode
                   / '\\x' hex hex         -- hex
                   / !'\\' .               -- regular

  hex             <- [0-9a-fA-F]
  comment         <- '#' ( !endOfLine . )* endOfLine
  endOfLine       <- '\r\n' / '\n' / '\r'
  endOfFile       <- !.
}
