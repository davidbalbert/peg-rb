# Generated by: bin/compile lib/ohm/ohm-parser.peg Ohm::Parser -o lib/ohm/parser.rb
# Do not edit. Edit lib/ohm/ohm-parser.peg instead.

require 'peg/grammar'
require 'peg/runtime'

class Ohm::Parser < Peg::BuiltInRules
  self.default_rule = :Seq

  def Seq
    Peg::ZeroOrMore.new(
      Peg::Apply.new(:Iter)
    )
  end

  def Iter
    Peg::Choice.new(
      Peg::Apply.new(:Iter_star),
      Peg::Apply.new(:Iter_plus),
      Peg::Apply.new(:Iter_opt),
      Peg::Apply.new(:Pred)
    )
  end

  def Iter_star
    Peg::Seq.new(
      Peg::Apply.new(:Pred),
      Peg::Term.new("*")
    )
  end

  def Iter_plus
    Peg::Seq.new(
      Peg::Apply.new(:Pred),
      Peg::Term.new("+")
    )
  end

  def Iter_opt
    Peg::Seq.new(
      Peg::Apply.new(:Pred),
      Peg::Term.new("?")
    )
  end

  def Pred
    Peg::Choice.new(
      Peg::Apply.new(:Pred_not),
      Peg::Apply.new(:Pred_lookahead),
      Peg::Apply.new(:Lex)
    )
  end

  def Pred_not
    Peg::Seq.new(
      Peg::Term.new("~"),
      Peg::Apply.new(:Lex)
    )
  end

  def Pred_lookahead
    Peg::Seq.new(
      Peg::Term.new("&"),
      Peg::Apply.new(:Lex)
    )
  end

  def Lex
    Peg::Choice.new(
      Peg::Apply.new(:Lex_lex),
      Peg::Apply.new(:Base)
    )
  end

  def Lex_lex
    Peg::Seq.new(
      Peg::Term.new("#"),
      Peg::Apply.new(:Base)
    )
  end

  def Base
    Peg::Choice.new(
      Peg::Apply.new(:Base_application),
      Peg::Apply.new(:Base_range),
      Peg::Apply.new(:Base_terminal),
      Peg::Apply.new(:Base_paren)
    )
  end

  def Base_application
    Peg::Seq.new(
      Peg::Apply.new(:ident),
      Peg::Maybe.new(
        Peg::Apply.new(:Params)
      ),
      Peg::Not.new(
        Peg::Choice.new(
          Peg::Seq.new(
            Peg::Maybe.new(
              Peg::Apply.new(:ruleDescr)
            ),
            Peg::Term.new("=")
          ),
          Peg::Term.new(":="),
          Peg::Term.new("+=")
        )
      )
    )
  end

  def Base_range
    Peg::Seq.new(
      Peg::Apply.new(:oneCharTerminal),
      Peg::Term.new(".."),
      Peg::Apply.new(:oneCharTerminal)
    )
  end

  def Base_terminal
    Peg::Apply.new(:terminal)
  end

  def Base_paren
    Peg::Seq.new(
      Peg::Term.new("("),
      Peg::Apply.new(:Alt),
      Peg::Term.new(")")
    )
  end

  def ruleDescr
    Peg::Seq.new(
      Peg::Term.new("("),
      Peg::Apply.new(:ruleDescrText),
      Peg::Term.new(")")
    )
  end

  def ruleDescrText
    Peg::ZeroOrMore.new(
      Peg::Seq.new(
        Peg::Not.new(
          Peg::Term.new(")")
        ),
        Peg::Apply.new(:any)
      )
    )
  end

  def caseName
    Peg::Seq.new(
      Peg::Term.new("--"),
      Peg::ZeroOrMore.new(
        Peg::Seq.new(
          Peg::Not.new(
            Peg::Term.new("\n")
          ),
          Peg::Apply.new(:space)
        )
      ),
      Peg::Apply.new(:name),
      Peg::ZeroOrMore.new(
        Peg::Seq.new(
          Peg::Not.new(
            Peg::Term.new("\n")
          ),
          Peg::Apply.new(:space)
        )
      ),
      Peg::Choice.new(
        Peg::Term.new("\n"),
        Peg::And.new(
          Peg::Term.new("}")
        )
      )
    )
  end

  def name
    Peg::Seq.new(
      Peg::Apply.new(:nameFirst),
      Peg::ZeroOrMore.new(
        Peg::Apply.new(:nameRest)
      )
    )
  end

  def nameFirst
    Peg::Choice.new(
      Peg::Term.new("_"),
      Peg::Apply.new(:letter)
    )
  end

  def nameRest
    Peg::Choice.new(
      Peg::Term.new("_"),
      Peg::Apply.new(:alnum)
    )
  end

  def ident
    Peg::Apply.new(:name)
  end

  def terminal
    Peg::Seq.new(
      Peg::Term.new("\""),
      Peg::ZeroOrMore.new(
        Peg::Apply.new(:terminalChar)
      ),
      Peg::Term.new("\"")
    )
  end

  def oneCharTerminal
    Peg::Seq.new(
      Peg::Term.new("\""),
      Peg::Apply.new(:terminalChar),
      Peg::Term.new("\"")
    )
  end

  def ident
    Peg::Apply.new(:name)
  end

  def terminal
    Peg::Seq.new(
      Peg::Term.new("\""),
      Peg::ZeroOrMore.new(
        Peg::Apply.new(:terminalChar)
      ),
      Peg::Term.new("\"")
    )
  end

  def oneCharTerminal
    Peg::Seq.new(
      Peg::Term.new("\""),
      Peg::Apply.new(:terminalChar),
      Peg::Term.new("\"")
    )
  end

  def terminalChar
    Peg::Choice.new(
      Peg::Apply.new(:escapeChar),
      Peg::Seq.new(
        Peg::Not.new(
          Peg::Term.new("\\")
        ),
        Peg::Not.new(
          Peg::Term.new("\"")
        ),
        Peg::Not.new(
          Peg::Term.new("\n")
        ),
        Peg::Apply.new(:any)
      )
    )
  end

  def escapeChar
    Peg::Choice.new(
      Peg::Apply.new(:escapeChar_backslash),
      Peg::Apply.new(:escapeChar_doubleQuote),
      Peg::Apply.new(:escapeChar_singleQuote),
      Peg::Apply.new(:escapeChar_backspace),
      Peg::Apply.new(:escapeChar_lineFeed),
      Peg::Apply.new(:escapeChar_carriageReturn),
      Peg::Apply.new(:escapeChar_tab),
      Peg::Apply.new(:escapeChar_unicodeCodePoint),
      Peg::Apply.new(:escapeChar_unicodeEscape),
      Peg::Apply.new(:escapeChar_hexEscape)
    )
  end

  def escapeChar_backslash
    Peg::Term.new("\\\\")
  end

  def escapeChar_doubleQuote
    Peg::Term.new("\\\"")
  end

  def escapeChar_singleQuote
    Peg::Term.new("\\'")
  end

  def escapeChar_backspace
    Peg::Term.new("\\b")
  end

  def escapeChar_lineFeed
    Peg::Term.new("\\n")
  end

  def escapeChar_carriageReturn
    Peg::Term.new("\\r")
  end

  def escapeChar_tab
    Peg::Term.new("\\t")
  end

  def escapeChar_unicodeCodePoint
    Peg::Seq.new(
      Peg::Term.new("\\u{"),
      Peg::OneOrMore.new(
        Peg::Apply.new(:hexDigit)
      ),
      Peg::Term.new("}")
    )
  end

  def escapeChar_unicodeEscape
    Peg::Seq.new(
      Peg::Term.new("\\u"),
      Peg::Apply.new(:hexDigit),
      Peg::Apply.new(:hexDigit),
      Peg::Apply.new(:hexDigit),
      Peg::Apply.new(:hexDigit)
    )
  end

  def escapeChar_hexEscape
    Peg::Seq.new(
      Peg::Term.new("\\x"),
      Peg::Apply.new(:hexDigit),
      Peg::Apply.new(:hexDigit)
    )
  end

  def space
    Peg::Choice.new(
      Peg::Apply.new(:comment),
      super
    )
  end

  def comment
    Peg::Choice.new(
      Peg::Apply.new(:comment_singleLine),
      Peg::Apply.new(:comment_multiLine)
    )
  end

  def comment_singleLine
    Peg::Seq.new(
      Peg::Term.new("//"),
      Peg::ZeroOrMore.new(
        Peg::Seq.new(
          Peg::Not.new(
            Peg::Term.new("\n")
          ),
          Peg::Apply.new(:any)
        )
      ),
      Peg::And.new(
        Peg::Choice.new(
          Peg::Term.new("\n"),
          Peg::Apply.new(:end)
        )
      )
    )
  end

  def comment_multiLine
    Peg::Seq.new(
      Peg::Term.new("/*"),
      Peg::ZeroOrMore.new(
        Peg::Seq.new(
          Peg::Not.new(
            Peg::Term.new("*/")
          ),
          Peg::Apply.new(:any)
        )
      ),
      Peg::Term.new("*/")
    )
  end

  def tokens
    Peg::ZeroOrMore.new(
      Peg::Apply.new(:token)
    )
  end

  def token
    Peg::Choice.new(
      Peg::Apply.new(:caseName),
      Peg::Apply.new(:comment),
      Peg::Apply.new(:ident),
      Peg::Apply.new(:operator),
      Peg::Apply.new(:punctuation),
      Peg::Apply.new(:terminal),
      Peg::Any.new
    )
  end

  def operator
    Peg::Choice.new(
      Peg::Term.new("<:"),
      Peg::Term.new("="),
      Peg::Term.new(":="),
      Peg::Term.new("+="),
      Peg::Term.new("*"),
      Peg::Term.new("+"),
      Peg::Term.new("?"),
      Peg::Term.new("~"),
      Peg::Term.new("&")
    )
  end

  def punctuation
    Peg::Choice.new(
      Peg::Term.new("<"),
      Peg::Term.new(">"),
      Peg::Term.new(","),
      Peg::Term.new("--")
    )
  end
end
